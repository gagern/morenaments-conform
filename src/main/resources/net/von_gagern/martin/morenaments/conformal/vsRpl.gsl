
const vec4 bgColor = vec4(12./15., 12./15., 12./15., 1.);

uniform sampler2D texSampler;

const int maxGenerators = 6;
uniform int numGenerators;
uniform mat4 insidenessChecks[maxGenerators];
uniform mat4 generators[maxGenerators];

const int maxAaOffsets = 17;
uniform int numAaOffsets;
uniform vec3 aaOffsets[maxAaOffsets];

vec4 sample(vec2 v) {
    if (v.x * v.x + v.y*v.y >= 1.0)
        return bgColor;
    return texture2D(texSampler, v);
}

void main() {
    vec4 v = gl_TexCoord[0];
    vec4 sumColors = vec4(0.0, 0.0, 0.0, 0.0), sampleColor;
    float sumWeights = 0.0;
    vec3 aa;
    int i;
    for (i = 0; i < numAaOffsets; ++i) {
        aa = aaOffsets[i];
        sampleColor = sample(v.xy + aa.xy);
        sumColors += aa.z * sampleColor;
        sumWeights += aa.z;
    }
    if (sumWeights == 0.0) {
        discard;
    } else {
        gl_FragColor = sumColors / sumWeights;
    }
}

/* For emacs:
 * Local Variables:
 * mode:c
 * c-basic-offset:4
 * indent-tabs-mode:nil
 * End:
 */
